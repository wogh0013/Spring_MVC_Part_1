웹 서버
 - HTTP 기반 동작
 - 정적 리소스 
 - 정적 HTML, CSS, JS, 이미지, 영상
 - ex) NGINX, APACHE

웹 애플리케이션 서버(WAS)
 - HTTP 기반 동작
 - 웹 서버 기능 포함
 - 프로그램 코드 실행 -> 애플리케이션 로직 수행
 - 동적 HTML, HTTP API(JSON), 서블릿, JSP, 스프링 MVC
 - ex) 톰캣

웹 시스템 구성 
             (정적 리소스)
ㅁ ---------- [Web Server] ------------ [WAS] ------------- [DB]
            HTML, CSS, JS      애플리케이션 로짓
                이미지

 - 웹 서버는 잘 안 죽지만, WAS는 잘 죽음
 - WAS와 DB가 죽으면, 웹 서버에서 오류화면 HTML을 제공해줌                


서블릿
 @WebServlet(name = 'helloServlet', urlPatterns = "/hello")
 - urlPatterns의 URL이 호출되면 서블릿 코드가 실행
 - HTTP 요청 정보를 편리하게 사용할 수 있는 HttpServletRequest
 - HTTP 응답 정보를 편리하게 사용할 수 있는 HttpServletResponse
 - 개발자는 HTTP 스펙을 매우 편리하게 사용
 - HTTP 요청 시
   1) WAS는 Request, Response 객체를 새로 만들어서 서블릿 객체 호출
   2) 개발자는 Reqeust 객체에서 HTTP 요청 정보를 꺼내서 편리하게 사용
   3) 개발자는 Response 객체에서 HTTP 응답 정보를 편리하게 입력
   4) WAS는 Response 객체에 담겨있는 내용으로 HTTP 응답 정보 생성
 - 서블릿 컨테이너
   - 서블릿을 지원하는 WAS(ex. 톰캣)
   - 서블릿 객체를 생성-초기화-호출-종료하는 생명주기를 관리
   - 서블릿 객체는 *싱글톤으로 관리
     1) 최초 로딩 시점에 서블릿 객체를 미리 만들고, 고객의 요청이 들어올 때마다 재사용
     2) 모든 고객 요청은 동일한 서블릿 객체 인스턴스에 접근
     3) 공유 변수 사용 주의
     4) 서블릿 컨테이너 종료 시 함께 종료
   - JSP도 서블릿으로 변환되어서 사용    
   - 멀티 쓰레드 지원(동시 요청)

프로세스: 프로그램을 실행하는 것
쓰레드: 프로그램 내부에서 여러 가지 코드를 실행하는 것

쓰레드
 - 애플리케이션 코드를 하나하나 순차적으로 실행하는 것
 - 한 번에 하나의 코드 라인만 수행
 - 동시 처리가 필요하면 쓰레드를 추가 생성
 - 요청마다 쓰레드를 생성하는 것은 비효율적

쓰레드 풀
 - 필요한 쓰레드를 쓰레드 풀에 보관하고 관리
 - 쓰레드 풀에 미리 쓰레드를 생성해놓음
 - 요청이 오면 이미 생성돼있는 쓰레드를 사용 -> 종료되면 쓰레드 풀에 반납
 - 최대 쓰레드를 모두 사용하고 있음 -> 새로 들어오는 요청은 대기 or 거절
 - 요청이 너무 많아도 기존 요청은 안전하게 처리 가능, 응답 시간 빠름 
 - WAS의 주요 튜닝 포인트는 최드 쓰레드 수이다.

백엔드 개발자가 서비스를 제공할 때 생각해야 되는 세 가지
 1. 정적 리소스
  - 고정된 HTML 파일, CSS, JS, 이미지, 영상 등을 제공
  - 주로 웹 브라우저
 2. HTML 페이지
  - 동적으로 필요한 HTML 파일을 생성해서 전달(jsp, 타임리프)
  - 웹 브라우저: HTML 해석                 
 3. HTTP API
  - HTML이 아니라 데이터를 전달
  - 주로 JSON 형식
  - UI 클라이언트 접점(앱 클라이언트, 웹 클라이언트(react, vue), ..)
  - 서버 to 서버(주문 서버 -> 결제 서버)

*SSR(서버 사이드 렌더링)
 - HTML 최종 결과를 '서버'에서 만들어서 웹 브라우저에 전달
 - 주로 정적인 화면에 사용
 - 관련 기술: JSP, 타임리프(백엔드 개발자)

CSR(클라이언트 사이드 렌더링)
 - HTML 결과를 '웹 브라우저'에서 동적으로 생성해서 적용(by 자바스크립트)
 - 주로 동적인 화면에 사용
 - 웹 환경을 필요한 부분만 변경할 수 있음(ex 구글지도)
 - 관련기술: React, Vue.js(프론트엔드 개발자) 

스프링 부트
 - 과거에는 서버에 WAS를 직접 설치, 소스는 War 파일을 만들어서 설치한 WAS에 배포
 - 스프링 부트는 서버를 내장
 - 빌드 결과(Jar)에 WAS 서버 포함 -> 빌드 배포 단순화
 
 ***
 ex)
 절대경로 : action="/save"  localhost:8080/save
 상대경로 : action="save"   localhost:8080/현재 URL 경로/save

 redirect : 클라이언트 -> 서버 -> 클라이언트 -> 서버 (클라이언트가 인지)
 forward : 클라이언트 -> 서버 -> 클라이언트 (클라이언트가 인지X)


MVC 패턴 : 컨트롤러와 뷰라는 영역으로 서로 역할을 나눈 것이다.
1. Controller : HTTP 요청을 받아서 파라미터를 검증하고, 비즈니스 로직을 실행한다.
                그리고 뷰에 전달할 결과 데이터를 조회해서 모델에 담는다.
2. Model : 뷰에 출력할 데이터를 담아둔다. 뷰가 필요한 데이터를 모두 모델에 담아서
           전달해주는 덕분에, 뷰는 비즈니스 로직이나 데이터 접근을 몰라도 되고, 
           화면에 렌더링하는 일에 집중할 수 있다.
3. View : 모델에 담겨있는 데이터를 사용해서 화면을 그리는 일에 집중한다.
          여기서는 HTML을 생성하는 부분을 말한다.


- Model : HttpServletRequest 객체를 사용. request는 내부에 데이터 저장소를 가지고 있음
          request.setAttribute(): 데이터 보관 / request.getAttribute(): 데이터 조회


FrontController 패턴
 - 프론트 컨트롤러 서블릿 하나로 클라이언트의 요청을 받음
 - 프론트 컨트롤러가 요청에 맞는 컨트롤러를 찾아서 호출
 - 입구를 하나로 ! (수문장 역할)
 - 공통 처리 기능
 - 프론트 컨트롤러를 제외한 나머지 컨트롤러는 서블릿을 사용하지 않아도 됨
 - 스프링 웹 MVC의 핵심이 FrontController 이다
 - 스프링 웹 MVC의 DispatcherServlet이 FrontController 패턴으로 구현돼있음

핸들러 어댑터 : 중간에 어댑터 역할을 하는 어댑터 -> 다양한 종류의 컨트롤러 호출 가능
핸들러 : 컨트롤러의 더 넓은 범위 -> 어댑터가 있기 때문에 다양한 것들 처리 가능



--
스프링 MVC 구조
 - 프론트 컨트롤러 => DispatcherServlet
 - 동작 순서
  1. 핸들러 조회 : 핸들러 매핑을 통해 요청 URL에 매핑된 핸들러(컨트롤러)를 조회
  2. 핸들러 어댑터 조회 : 핸들러를 실행할 수 있는 핸들러 어댑터를 조회
  3. 핸들러 어댑터 실행 : 핸들러 어댑터 실행
  4. 핸들러 실행 : 핸들러 어댑터가 실제 핸드러를 실행
  5. ModelAndView 반환 : 핸들러 어댑터는 핸들러가 반환하는 정보를 ModelAndView로 변환해서 반환
  6. viewResolver 호출 : 뷰 리졸버를 찾고 실행
  7. View 반환 : 뷰 리졸버는 뷰의 논리 이름을 물리 이름으로 바꾸고, 렌더링 역할을 담당하는 뷰 객체를 반환
  8. 뷰 렌더링 : View를 통해서 뷰를 렌더링

 - @RequestMapping : 가장 우선순위가 높은 핸들러 매핑과 핸들러 어댑터(애노테이션 기반의 컨트롤러 지원)
  - @GetMapping
  - @PostMapping 으로 변경 가능(더 심플해짐)

@Controller
 1. 스프링이 자동으로 스프링 빈으로 등록(내부에 @Component 애노테이션 존재)
 2. 스프링 MVC에서 애노테이션 기반 컨트롤러로 인식(RequestMappingHandlerMapping)




ㅡㅡㅡㅡㅡ
Jar : 스프링 부트 사용, 내장 서버(톰캣 등)에 최적화, webapp 경로 사용 X
War : JSP 사용, 내장 서버 + 외부 서버 배포

@Controller
 - 반환값이 String이면 '뷰 이름'으로 인식한다. -> 뷰를 찾고 뷰가 렌더링됨
@RestController
 - 반환값으로 '뷰'를 찾는 것이 아니라, HTTP 메시지 바디에 바로 입력됨
 - 실행결과로 메시지를 받을 수 있음

로그
 - 실무에서는 System.out.println()으로 출력 X -> 로깅 라이브러리 활용
 - 로깅 라이브러리
  1) 인터페이스 : SLF4J
  2)  구현체    : Logback
 - hello.springmvc 패키지와 그 하위 로그 레벨 설정, 기본이 info임
   로그 레벨 : trace - debug(개발 단계) - info(운영 단계) - warn - error
   logging.level.hello.springmvc=info
 - 올바른 로그 사용법
  log.debug("data={}", data)     (O)
  log.debug("data=" + data)      (X) -> 더하기로 처리돼서 의미 없는 연산 발생
 - 로그 사용 시 장점
  1) 상황에 따라 로그 레벨을 조절할 수 있다.
  2) 콘솔, 파일, 네트워크 등 로그를 별도의 위치에 남길 수 있다.(분할도 가능)
  3) 내부 버퍼링, 멀티 쓰레드 등 성능이 좋아서 실무에서는 반드시 로그 사용
  4) 부가 정보(쓰레드 정보, 클래스 이름)를 볼 수 있고, 출력 모양 조정 가능

경로 변수(Path Variable)
 - url 자체에 값이 들어가있는 것


클라이언트에서 서버로 요청 데이터를 전달할 때 사용하는 3가지 방법
 1. GET - 쿼리 파라미터
  - 메시지 바디 없이, URL의 쿼리 파라미터에 데이터를 포함
  - 검색, 필터 등에 사용
 2. POST - HTML Form
  - 메시지 바디에 쿼리 파라미터 형식으로 전달
  - 회원가입, 상품주문 등에 사용
 3. HTTP message body에 데이터를 직접 담아서 사용
  - HTTP API에서 주로 사용(JSON, XML, TEXT)
  - 데이터 형식은 주로 JSON 사용
  - POST, PUT, PATCH

HTTP 요청 파라미터 (@RequestParam)

HTTP 요청 파라미터 (@ModelAttribute)
 1) 요청 파라미터를 받아서 필요한 객체를 만듦
 2) 그 객체에 값을 넣어줌
  -> 이 두 가지를 완전히 자동화해주는 것 : @ModelAttribute

@ModelAttribute 기능
 1) 객체 생성
 2) 요청 파라미터 이름으로 객체의 프로퍼티(setXxx, getXxx..)를 찾음
 3) setter를 호출해서 파라미터의 값을 입력(바인딩)

생략이 된다면 @RequestParam인지 @ModelAttribute인지 어떻게 알까?
String, int, Integer같은 단순 타입 -> @RequestParam
그 외 -> @ModelAttribute

@RequestBody
 - HTTP 메시지 바디 정보를 편리하게 조회 가능
 - 헤더 정보 : HttpEntity 또는 RequestHeader 사용

- 요청 파라미터 조회 : @RequestParam, @ModelAttribute
- HTTP 메시지 바디 직접 조회 : @RequestBody
- 응답 결과를 HTTP 메시지 바디에 직접 담아서 전달 : @ResponseBody 

String을 반환하는 경우 - View 또는 HTTP 메시지
 - @ResponseBody가 없으면 'response/hello'로 뷰 리졸버가 실행돼서 뷰를 찾고 렌더링됨
 - @ResponseBody가 있으면 HTTP 메시지 바디에 직접 'response/hello'라는 문자가 입력됨(뷰 리졸버 실행 X)

스프링(서버)에서 응답 데이터를 만드는 방법 3가지
 1. 정적 리소스
  - 웹 브라우저에 정적인 HTML, CSS, JS 제공
  - 스프링 부트는 다음 디렉토리에 있는 정적 리소스를 제공
     └ /static, /public, /resources, /META-INF/resources
     └ src/main/resources : 리소스를 보관하는 곳, 클래스패스의 시작 경로
 2. 뷰 템플릿
  - 웹 브라우저에 동적인 HTML 제공
  - 뷰 템플릿을 거쳐서 HTML 생성 -> 뷰가 응답을 만들어서 전달
  - 스프링 부트의 기본 뷰 템플릿 경로
     └ src/main/resources/templates
 3. HTTP 메시지 사용
  - HTTP API 제공 -> 데이터 전달(HTML 전달 X) -> HTTP 메시지 바디에 JSON 같은 형식으로 데이터 전달 

@RestController
 - 해당 컨트롤러에 모두 '@ResponseBody'가 적용
  -> 뷰 템플릿 사용 X
  -> HTTP 메시지 바디에 직접 데이터 입력
  -> Rest API(HTTP API)를 만들 때 사용하는 컨트롤러
 
HTTP 메시지 컨버터
 - 뷰 템플릿으로 HTML을 생성해서 응답하는 것 X
  -> HTTP API처럼 JSON 데이터를 HTTP 메시지 바디에서 직접 읽거나 쓰는 경우 컨버터 사용

@ResponseBody 사용
 - HTTP 메시지 바디에 문자 내용 직접 반환
 - view resolver 대신 HttpMessageConverter 동작


- 타임리프 사용 선언
 <html xmlns:th="http://www.thymeleaf.org">
- 속성 변경 - th:href
 - th:href="@{/css/bootstrap.min.css}"
 - href="value1" 을 th:href="value2" 의 값으로 변경한다.
 - 타임리프 뷰 템플릿을 거치게 되면 원래 값을 th:xxx 값으로 변경한다. 만약 값이 없다면 새로 생성한다.
 - HTML을 그대로 볼 때는 href 속성이 사용되고, 뷰 템플릿을 거치면 th:href 의 값이 href 로
   대체되면서 동적으로 변경할 수 있다.
 - 대부분의 HTML 속성을 th:xxx 로 변경할 수 있다.
- 타임리프 핵심
 - 핵심은 th:xxx 가 붙은 부분은 서버사이드에서 렌더링 되고, 기존 것을 대체한다. th:xxx 이 없으면 기존
   html의 xxx 속성이 그대로 사용된다.
 - HTML을 파일로 직접 열었을 때, th:xxx 가 있어도 웹 브라우저는 th: 속성을 알지 못하므로 무시한다.
 - 따라서 HTML을 파일 보기를 유지하면서 템플릿 기능도 할 수 있다.
- URL 링크 표현식 - @{...},
 - th:href="@{/css/bootstrap.min.css}"
 - @{...} : 타임리프는 URL 링크를 사용하는 경우 @{...} 를 사용한다. 이것을 URL 링크 표현식이라 한다.
 - URL 링크 표현식을 사용하면 서블릿 컨텍스트를 자동으로 포함한다.

상품 등록 폼으로 이동
- 속성 변경 - th:onclick
 - onclick="location.href='addForm.html'"
 - th:onclick="|location.href='@{/basic/items/add}'|"
   여기에는 다음에 설명하는 리터럴 대체 문법이 사용되었다. 자세히 알아보자.
- 리터럴 대체 - |...|
 - |...| :이렇게 사용한다.
 - 타임리프에서 문자와 표현식 등은 분리되어 있기 때문에 더해서 사용해야 한다.
     <span th:text="'Welcome to our application, ' + ${user.name} + '!'">
 - 다음과 같이 리터럴 대체 문법을 사용하면, 더하기 없이 편리하게 사용할 수 있다.
     <span th:text="|Welcome to our application, ${user.name}!|">
 - 결과를 다음과 같이 만들어야 하는데
     location.href='/basic/items/add'
 - 그냥 사용하면 문자와 표현식을 각각 따로 더해서 사용해야 하므로 다음과 같이 복잡해진다.
     th:onclick="'location.href=' + '\'' + @{/basic/items/add} + '\''"
 - 리터럴 대체 문법을 사용하면 다음과 같이 편리하게 사용할 수 있다.
     th:onclick="|location.href='@{/basic/items/add}'|"
- 반복 출력 - th:each
 - <tr th:each="item : ${items}">
 - 반복은 th:each 를 사용한다. 이렇게 하면 모델에 포함된 items 컬렉션 데이터가 item 변수에 하나씩
   포함되고, 반복문 안에서 item 변수를 사용할 수 있다.
 - 컬렉션의 수 만큼 <tr>..</tr> 이 하위 테그를 포함해서 생성된다.
- 변수 표현식 - ${...}
 - <td th:text="${item.price}">10000</td>
 - 모델에 포함된 값이나, 타임리프 변수로 선언한 값을 조회할 수 있다.
 - 프로퍼티 접근법을 사용한다. ( item.getPrice() )
- 내용 변경 - th:text
 - <td th:text="${item.price}">10000</td>
 - 내용의 값을 th:text 의 값으로 변경한다.
 - 여기서는 10000을 ${item.price} 의 값으로 변경한다.
- URL 링크 표현식2 - @{...},
 - th:href="@{/basic/items/{itemId}(itemId=${item.id})}"
 - 상품 ID를 선택하는 링크를 확인해보자.
 - URL 링크 표현식을 사용하면 경로를 템플릿처럼 편리하게 사용할 수 있다.
 - 경로 변수( {itemId} ) 뿐만 아니라 쿼리 파라미터도 생성한다.
 - 예) th:href="@{/basic/items/{itemId}(itemId=${item.id}, query='test')}"
     생성 링크: http://localhost:8080/basic/items/1?query=test
- URL 링크 간단히
 - th:href="@{|/basic/items/${item.id}|}"
 - 상품 이름을 선택하는 링크를 확인해보자.
 - 리터럴 대체 문법을 활용해서 간단히 사용할 수도 있다



























































